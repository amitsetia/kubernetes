apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: default
spec:
  serviceName: "redis-headless-svc"
  replicas: 2
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      initContainers:
      - name: init-redis
        image: redis:alpine
        command: [ "sh", "-c" ]
        args:
         - |
          set -ex
          # Generate redis server-id from pod ordinal index.
          MASTER_FDQN=`hostname  -f | sed -e 's/redis-[0-9]\./redis-0./'`
          #[[ `hostname` =~ -\([0-9]+\)$ ]] || exit 1
          #ordinal=${BASH_REMATCH[1]}
          ordinal=$(echo `hostname` | grep -Eo '[0-9]+$'|| exit 1)
          # Copy appropriate redis config files from config-map to respective directories.
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/master.conf /etc/redis-config.conf
          else
            cp /mnt/slave.conf /etc/redis-config.conf
            echo "slaveof $MASTER_FDQN 6379" >> /etc/redis-config.conf
          fi
        volumeMounts:
        - name: redis-claim
          mountPath: /etc
        - name: config
          mountPath: /mnt/
      containers:
      - name: redis
        image: redis:alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
          - redis-server
          - "/etc/redis-config.conf"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-claim
          mountPath: /etc
      volumes:
      - name: config
        configMap:
          name: redis-config                
  volumeClaimTemplates:
  - metadata:
      name: redis-claim
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: redis-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
